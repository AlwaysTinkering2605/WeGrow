
OKR & ISO 9001:2015 Implementation Plan
Apex Performance & Development Platform

Document Version: 1.0
Created: October 2025
Status: Planning Phase
Owner: Development Team

Executive Summary
This document outlines a comprehensive plan to transform Apex's current objectives system into a best-in-class OKR (Objectives and Key Results) platform that is fully compliant with ISO 9001:2015 quality management standards. The implementation is structured in 7 sequential phases, each building upon the previous to ensure stability and minimize disruption.

Key Objectives:

Implement complete Key Results tracking with progress history
Add individual ownership and accountability at all levels
Enable ISO 9001 compliance with audit trails and evidence management
Create executive dashboards and management review capabilities
Establish continuous improvement workflows with corrective actions
Timeline: 10-12 weeks (5 sprints)
Effort: ~200-250 development hours

Current State Assessment
✅ What We Have
Existing Infrastructure:

Company Objectives with basic fields (title, description, dates, creator)
Key Results linked to company objectives (target, current value, unit)
Team Objectives with normalized teamId foreign key
Team Key Results with individual assignment capability
Weekly check-ins for individual goals with confidence levels (Green/Amber/Red)
Competency audit trail (immutable change history)
Role-based access control (operative, supervisor, leadership)
PostgreSQL database with Drizzle ORM
React Query for state management
❌ Critical Gaps
Best-in-Class OKR Requirements:

 No individual owner field on objectives (only team assignment)
 No objective type classification (Committed vs Aspirational)
 No standardized metric types (percentage, currency, numeric, boolean)
 No baseline/start values for key results
 No confidence score tracking for key results
 No progress update history (only current snapshot)
 No time-stamped progress check-ins for key results
ISO 9001:2015 Compliance Requirements:

 No quality policy linkage (Clause 6.2)
 No resource planning documentation (Clause 6.2)
 No evaluation method specification (Clause 6.2)
 No evidence/attachment system (Clause 7.5)
 No audit trail for changes (Clause 7.5)
 No nonconformity/corrective action linkage (Clause 10.2)
 No management review reporting (Clause 9.3)
Phase 1: Enhanced Key Results System
Priority: CRITICAL
Sprint: 1 (Week 1-3)
Status: 🔴 Not Started

Overview
Transform the basic key results tracking into a comprehensive, time-series measurement system with confidence scoring and detailed progress history.

Database Schema Changes
1.1 Enhance keyResults Table (Company Level)
ALTER TABLE key_results ADD COLUMN:
- owner_id TEXT REFERENCES users(id) -- Individual accountable
- metric_type TEXT CHECK (metric_type IN ('percentage', 'numeric', 'currency', 'boolean'))
- start_value NUMERIC -- Baseline measurement
- confidence_score INTEGER CHECK (confidence_score BETWEEN 1 AND 10)
- last_confidence_update TIMESTAMP WITH TIME ZONE
1.2 Enhance teamKeyResults Table
ALTER TABLE team_key_results ADD COLUMN:
- metric_type TEXT CHECK (metric_type IN ('percentage', 'numeric', 'currency', 'boolean'))
- start_value NUMERIC
- confidence_score INTEGER CHECK (confidence_score BETWEEN 1 AND 10)
- last_confidence_update TIMESTAMP WITH TIME ZONE
NOTE: owner_id already exists as assignedToUserId
1.3 Create krProgressUpdates Table
export const krProgressUpdates = pgTable("kr_progress_updates", {
  id: text("id").primaryKey().default(sql`gen_random_uuid()`),
  keyResultId: text("key_result_id").notNull(),
  keyResultType: text("key_result_type").notNull(), // 'company' or 'team'
  updatedBy: text("updated_by").notNull().references(() => users.id),
  previousValue: numeric("previous_value").notNull(),
  newValue: numeric("new_value").notNull(),
  confidenceScore: integer("confidence_score"), // 1-10
  updateNote: text("update_note"),
  timestamp: timestamp("timestamp").defaultNow().notNull(),
});
Indexes:

idx_kr_progress_key_result on (keyResultId, timestamp DESC)
idx_kr_progress_updated_by on (updatedBy)
Implementation Tasks
Backend (server/storage.ts, server/routes.ts)
 Add new columns to IStorage interface methods
 Create CRUD operations for krProgressUpdates
 Update keyResult update mutation to auto-create progress record
 Add confidence score update endpoint
 Create progress history retrieval endpoint
 Add validation for metric types and value ranges
Frontend (client/src/components/)
 Create KeyResultCard component with:
Progress bar visualization (start → current → target)
Confidence score indicator (color-coded)
Owner avatar/badge
Metric type badge (%, $, #)
 Create KeyResultProgressDialog for check-ins:
Current value input
Confidence score slider (1-10)
Update notes textarea
Historical progress timeline
 Create ProgressHistoryTimeline component
 Update CompanyObjectives to display enhanced KRs
 Update TeamObjectives to display enhanced KRs
Shared Schema (shared/schema.ts)
 Add metricTypeEnum
 Update insertKeyResultSchema with new fields
 Update insertTeamKeyResultSchema with new fields
 Create insertKrProgressUpdateSchema
Testing
 Test KR creation with all metric types
 Test progress updates create audit entries
 Test confidence score updates
 Test progress history retrieval
 Test visualization rendering
Acceptance Criteria
✅ Key results have individual owners
✅ Metric types are standardized and enforced
✅ Start values establish baselines
✅ Confidence scores are tracked and color-coded
✅ Every progress update is recorded with timestamp
✅ Progress history is viewable as timeline
✅ UI displays progress visually with start/current/target
Phase 2: Enhanced Objectives (Ownership & Classification)
Priority: HIGH
Sprint: 1 (Week 1-3)
Status: 🔴 Not Started

Overview
Add individual accountability and strategic classification to all objectives, clarifying responsibility and expectation levels.

Database Schema Changes
2.1 Enhance companyObjectives Table
ALTER TABLE company_objectives ADD COLUMN:
- owner_id TEXT REFERENCES users(id) -- Single accountable leader
- objective_type TEXT CHECK (objective_type IN ('committed', 'aspirational'))
- quality_policy_links TEXT[] -- Array of quality policy IDs
- resource_requirements JSONB -- Structured resource planning
- evaluation_method TEXT -- How results will be measured
2.2 Enhance teamObjectives Table
ALTER TABLE team_objectives ADD COLUMN:
- owner_id TEXT REFERENCES users(id) -- Individual owner (in addition to team)
- objective_type TEXT CHECK (objective_type IN ('committed', 'aspirational'))
- quality_policy_links TEXT[]
- resource_requirements JSONB
- evaluation_method TEXT
Implementation Tasks
Backend
 Update IStorage interface for objective methods
 Add owner validation (must be leadership/supervisor)
 Add objective type filtering to queries
 Validate quality policy links exist
Frontend
 Add owner selection dropdown to objective forms
 Add objective type radio buttons (Committed/Aspirational)
 Add objective type badge display
 Create resource requirements form section
 Add evaluation method rich text field
 Filter objectives by type in dashboard
 Show owner avatar on objective cards
Shared Schema
 Create objectiveTypeEnum
 Update insert schemas with new fields
Testing
 Test objective creation with owner
 Test type classification and filtering
 Test owner dropdown filtering by role
 Test resource requirements JSONB structure
Acceptance Criteria
✅ Every objective has a named individual owner
✅ Objectives are classified as Committed or Aspirational
✅ Type badges are visible in all views
✅ Owner filtering works in dashboards
✅ Resource planning is documented
Phase 3: Quality Management Integration
Priority: HIGH
Sprint: 2 (Week 4-5)
Status: 🔴 Not Started

Overview
Integrate ISO 9001 quality management principles by linking objectives to quality policies and enabling resource planning.

Database Schema Changes
3.1 Create qualityPolicies Table
export const qualityPolicies = pgTable("quality_policies", {
  id: text("id").primaryKey().default(sql`gen_random_uuid()`),
  title: text("title").notNull(),
  description: text("description").notNull(),
  category: text("category").notNull(), // enum: customer_satisfaction, conformity, continual_improvement, other
  isActive: boolean("is_active").default(true),
  createdBy: text("created_by").notNull().references(() => users.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});
3.2 Create objectiveResources Table
export const objectiveResources = pgTable("objective_resources", {
  id: text("id").primaryKey().default(sql`gen_random_uuid()`),
  objectiveId: text("objective_id").notNull(),
  objectiveType: text("objective_type").notNull(), // 'company' or 'team'
  resourceType: text("resource_type").notNull(), // budget, personnel, equipment, training, other
  description: text("description").notNull(),
  quantity: numeric("quantity"),
  estimatedCost: numeric("estimated_cost"),
  status: text("status").default("requested"), // requested, approved, allocated, consumed
  requestedBy: text("requested_by").notNull().references(() => users.id),
  approvedBy: text("approved_by").references(() => users.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});
Indexes:

idx_objective_resources_objective on (objectiveId, objectiveType)
Implementation Tasks
Backend
 Create quality policy CRUD operations
 Create objective resources CRUD operations
 Add quality policy linkage validation
 Create resource approval workflow endpoints
 Add resource cost aggregation queries
Frontend
 Create QualityPolicyManagement page (leadership only)
 Create quality policy selector component (multi-select tags)
 Create ResourcePlanningWizard component:
Resource type selector
Quantity and cost inputs
Status tracking
Approval workflow
 Add quality policy tags to objective cards
 Create ResourceAllocationDashboard
 Show resource summary on objectives
Shared Schema
 Create qualityPolicyCategoryEnum
 Create resourceTypeEnum
 Create resourceStatusEnum
 Create insert schemas for both tables
Testing
 Test quality policy creation and management
 Test objective-to-policy linkage
 Test resource request creation
 Test resource approval workflow
 Test cost aggregation calculations
Acceptance Criteria
✅ Quality policies are defined and manageable
✅ Objectives can be tagged with quality policies
✅ Resource requirements are documented per objective
✅ Resource approval workflow is functional
✅ Resource costs are tracked and aggregated
✅ ISO 9001 Clause 6.2 requirements are met
Phase 4: Audit Trail & Evidence Management
Priority: CRITICAL
Sprint: 2-3 (Week 4-7)
Status: 🔴 Not Started

Overview
Implement immutable audit logging and evidence attachment capabilities to ensure full traceability for ISO 9001 compliance.

Database Schema Changes
4.1 Create objectiveAuditLog Table
export const objectiveAuditLog = pgTable("objective_audit_log", {
  id: text("id").primaryKey().default(sql`gen_random_uuid()`),
  objectiveId: text("objective_id").notNull(),
  objectiveType: text("objective_type").notNull(), // 'company' or 'team'
  changeType: text("change_type").notNull(), // created, updated, deleted, status_changed
  changedBy: text("changed_by").notNull().references(() => users.id),
  changeTimestamp: timestamp("change_timestamp").defaultNow().notNull(),
  fieldChanged: text("field_changed"),
  oldValue: jsonb("old_value"),
  newValue: jsonb("new_value"),
  changeReason: text("change_reason"),
});
IMPORTANT: This table is append-only. No UPDATE or DELETE operations allowed.

4.2 Create keyResultAuditLog Table
export const keyResultAuditLog = pgTable("key_result_audit_log", {
  id: text("id").primaryKey().default(sql`gen_random_uuid()`),
  keyResultId: text("key_result_id").notNull(),
  keyResultType: text("key_result_type").notNull(), // 'company' or 'team'
  changeType: text("change_type").notNull(), // created, updated, progress_updated, confidence_changed
  changedBy: text("changed_by").notNull().references(() => users.id),
  changeTimestamp: timestamp("change_timestamp").defaultNow().notNull(),
  fieldChanged: text("field_changed"),
  oldValue: jsonb("old_value"),
  newValue: jsonb("new_value"),
  changeReason: text("change_reason"),
});
IMPORTANT: This table is append-only. No UPDATE or DELETE operations allowed.

4.3 Create okrEvidence Table
export const okrEvidence = pgTable("okr_evidence", {
  id: text("id").primaryKey().default(sql`gen_random_uuid()`),
  linkedToId: text("linked_to_id").notNull(),
  linkedToType: text("linked_to_type").notNull(), // company_objective, team_objective, key_result, team_key_result
  evidenceType: text("evidence_type").notNull(), // document, report, data_export, survey, photo, link
  fileName: text("file_name"),
  fileUrl: text("file_url"), // Object storage path
  externalUrl: text("external_url"), // For links
  description: text("description").notNull(),
  uploadedBy: text("uploaded_by").notNull().references(() => users.id),
  uploadedAt: timestamp("uploaded_at").defaultNow().notNull(),
  verifiedBy: text("verified_by").references(() => users.id),
  verificationStatus: text("verification_status").default("pending"), // pending, verified, rejected
  verificationNote: text("verification_note"),
  verifiedAt: timestamp("verified_at"),
});
Indexes:

idx_audit_objective on (objectiveId, changeTimestamp DESC)
idx_audit_key_result on (keyResultId, changeTimestamp DESC)
idx_evidence_linked on (linkedToId, linkedToType)
Implementation Tasks
Backend
 Create audit log middleware for objectives
 Create audit log middleware for key results
 Ensure audit entries created on every change
 Create evidence upload endpoint (with object storage)
 Create evidence verification endpoints
 Create audit log retrieval endpoints (read-only)
 Add validation: audit logs cannot be modified
 Generate signed URLs for evidence downloads
Frontend
 Create AuditHistoryTimeline component (read-only view)
 Create EvidenceUploadComponent with drag-and-drop
 Create EvidenceGallery component
 Add verification workflow UI (leadership only)
 Add audit history tab to objective detail views
 Add evidence attachment section to objectives/KRs
 Show verification status badges
Object Storage Setup
 Check object storage status
 Setup object storage if not exists
 Create evidence upload buckets
 Implement signed URL generation
 Add file type validation
 Add file size limits
Shared Schema
 Create changeTypeEnum (objectives)
 Create changeTypeEnum (key results)
 Create evidenceTypeEnum
 Create verificationStatusEnum
 Create insert schemas (evidence only - audit logs are system-generated)
Testing
 Test audit log creation on objective changes
 Test audit log creation on KR changes
 Test audit logs are immutable (no UPDATE/DELETE)
 Test evidence upload to object storage
 Test evidence verification workflow
 Test signed URL generation
 Test audit history timeline display
Acceptance Criteria
✅ Every objective change is logged automatically
✅ Every key result change is logged automatically
✅ Audit logs are immutable and timestamped
✅ Evidence can be attached to objectives and KRs
✅ Evidence files are stored securely in object storage
✅ Leadership can verify evidence
✅ Audit history is viewable by all users
✅ ISO 9001 Clause 7.5 requirements are met
Phase 5: Corrective Actions & Nonconformity
Priority: MEDIUM
Sprint: 4 (Week 8-9)
Status: 🔴 Not Started

Overview
Implement continuous improvement mechanisms by tracking failures, root causes, and corrective actions as required by ISO 9001.

Database Schema Changes
5.1 Create correctiveActions Table
export const correctiveActions = pgTable("corrective_actions", {
  id: text("id").primaryKey().default(sql`gen_random_uuid()`),
  linkedObjectiveId: text("linked_objective_id"),
  linkedKeyResultId: text("linked_key_result_id"),
  title: text("title").notNull(),
  description: text("description").notNull(),
  rootCause: text("root_cause"), // Why did failure occur?
  proposedAction: text("proposed_action").notNull(), // What will be done?
  assignedTo: text("assigned_to").notNull().references(() => users.id),
  targetCompletionDate: timestamp("target_completion_date"),
  actualCompletionDate: timestamp("actual_completion_date"),
  status: text("status").default("open"), // open, in_progress, completed, verified, closed
  effectiveness: text("effectiveness"), // not_evaluated, effective, partially_effective, ineffective
  effectivenessNote: text("effectiveness_note"),
  createdBy: text("created_by").notNull().references(() => users.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});
5.2 Create nonconformities Table
export const nonconformities = pgTable("nonconformities", {
  id: text("id").primaryKey().default(sql`gen_random_uuid()`),
  objectiveId: text("objective_id").notNull(),
  objectiveType: text("objective_type").notNull(), // 'company' or 'team'
  nonconformityType: text("nonconformity_type").notNull(), // missed_target, delayed_completion, scope_change, resource_shortage
  description: text("description").notNull(),
  impact: text("impact").notNull(), // low, medium, high, critical
  detectedBy: text("detected_by").notNull().references(() => users.id),
  detectedDate: timestamp("detected_date").defaultNow().notNull(),
  correctiveActionId: text("corrective_action_id").references(() => correctiveActions.id),
  status: text("status").default("identified"), // identified, under_investigation, action_planned, resolved
  resolutionNote: text("resolution_note"),
  resolvedAt: timestamp("resolved_at"),
});
Indexes:

idx_corrective_actions_assigned on (assignedTo, status)
idx_nonconformities_objective on (objectiveId, objectiveType)
Implementation Tasks
Backend
 Create corrective action CRUD operations
 Create nonconformity CRUD operations
 Add linking validation (objective/KR exists)
 Create effectiveness evaluation endpoint
 Add status transition validation
 Create aggregation queries (open CAs, by impact, etc.)
Frontend
 Create CorrectiveActionForm component
 Create NonconformityForm component
 Add "Flag as At Risk" button on objectives
 Create CorrectiveActionBoard (Kanban view)
 Create RootCauseAnalysis component (5 Whys)
 Add effectiveness review workflow UI
 Create nonconformity tracking dashboard
 Link CAs to objectives in detail view
Shared Schema
 Create correctiveActionStatusEnum
 Create effectivenessEnum
 Create nonconformityTypeEnum
 Create impactEnum
 Create nonconformityStatusEnum
 Create insert schemas for both tables
Testing
 Test nonconformity creation from failed objective
 Test corrective action assignment
 Test CA status transitions
 Test effectiveness evaluation
 Test linking CA to nonconformity
 Test aggregation queries
Acceptance Criteria
✅ Failed objectives can trigger nonconformity records
✅ Root cause analysis is documented
✅ Corrective actions are assigned and tracked
✅ Effectiveness of actions is evaluated
✅ Nonconformities are categorized by impact
✅ Status workflow is enforced
✅ ISO 9001 Clause 10.2 requirements are met
Phase 6: Management Review & Reporting
Priority: HIGH
Sprint: 5 (Week 10-12)
Status: 🔴 Not Started

Overview
Create executive-level dashboards, reporting capabilities, and management review documentation as required by ISO 9001.

Database Schema Changes
6.1 Create managementReviews Table
export const managementReviews = pgTable("management_reviews", {
  id: text("id").primaryKey().default(sql`gen_random_uuid()`),
  reviewDate: timestamp("review_date").notNull(),
  reviewPeriodStart: timestamp("review_period_start").notNull(),
  reviewPeriodEnd: timestamp("review_period_end").notNull(),
  attendees: text("attendees").array(), // Array of user IDs
  chairPerson: text("chair_person").notNull().references(() => users.id),
  objectivesReviewed: text("objectives_reviewed").array(), // Array of objective IDs
  keyFindings: text("key_findings"),
  decisionsRequired: text("decisions_required"),
  actionItems: jsonb("action_items"), // Structured action items
  nextReviewDate: timestamp("next_review_date"),
  status: text("status").default("scheduled"), // scheduled, in_progress, completed, published
  createdBy: text("created_by").notNull().references(() => users.id),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});
6.2 Create okrSnapshots Table
export const okrSnapshots = pgTable("okr_snapshots", {
  id: text("id").primaryKey().default(sql`gen_random_uuid()`),
  snapshotDate: timestamp("snapshot_date").defaultNow().notNull(),
  objectiveId: text("objective_id").notNull(),
  objectiveType: text("objective_type").notNull(), // 'company' or 'team'
  objectiveData: jsonb("objective_data").notNull(), // Complete objective state
  keyResultsData: jsonb("key_results_data").notNull(), // Array of all KRs
  progressMetrics: jsonb("progress_metrics"), // Calculated metrics
  createdFor: text("created_for"), // management_review, quarterly_report, audit, scheduled
  managementReviewId: text("management_review_id").references(() => managementReviews.id),
});
Indexes:

idx_snapshots_objective on (objectiveId, snapshotDate DESC)
idx_snapshots_review on (managementReviewId)
Implementation Tasks
Backend
 Create management review CRUD operations
 Create snapshot generation endpoint
 Create scheduled snapshot job (weekly/monthly)
 Build executive dashboard aggregation queries:
Overall OKR completion rate
Objectives at risk (confidence < 4)
KRs trending behind
Nonconformities by severity
CA effectiveness
 Create ISO compliance report generator
 Create management review pack generator (PDF)
 Add period-over-period comparison logic
Frontend
 Create ExecutiveDashboard component:
OKR completion gauge
At-risk objectives list
Trending behind chart
Nonconformity heatmap
Resource utilization
 Create ManagementReviewForm component
 Create ComplianceReportViewer
 Create PerformanceTrendsChart (time series)
 Add date range filters
 Add team/owner/type filters
 Create PDF export functionality
 Add scheduled email reports
Reporting Features
 Overall OKR completion rate by type
 Strategic alignment heatmap
 Quality objectives alignment report
 Resource utilization vs. planned
 Audit trail completeness check
 Evidence verification status
 Corrective action effectiveness
 Risk assessment (at-risk objectives)
Shared Schema
 Create managementReviewStatusEnum
 Create snapshotCreatedForEnum
 Create insert schemas
Testing
 Test snapshot generation
 Test dashboard metric calculations
 Test report generation
 Test PDF export
 Test filtering and date ranges
 Test management review workflow
Acceptance Criteria
✅ Executive dashboard shows real-time metrics
✅ Management reviews can be scheduled and documented
✅ Point-in-time snapshots are generated
✅ ISO compliance reports are available
✅ Period-over-period trends are visible
✅ Reports can be exported to PDF
✅ ISO 9001 Clause 9.3 requirements are met
Phase 7: Weekly Check-ins Enhancement
Priority: MEDIUM
Sprint: 5 (Week 10-12)
Status: 🔴 Not Started

Overview
Extend the existing weekly check-in system to include key results, enabling regular progress updates and confidence tracking.

Implementation Tasks
Backend
 Extend weekly check-in API to accept KR updates
 Create bulk update endpoint for multiple KRs
 Add reminder notification system
 Create check-in completion tracking
Frontend
 Create WeeklyKRCheckIn component
 Add bulk update UI for multiple KRs
 Create confidence trend graphs
 Add team confidence rollup view (supervisors)
 Create check-in reminder notifications
 Add check-in completion dashboard
Testing
 Test KR check-in workflow
 Test bulk updates
 Test notification system
 Test confidence trends
Acceptance Criteria
✅ Users can check in on KRs weekly
✅ Bulk updates are supported
✅ Confidence trends are visualized
✅ Reminders are sent automatically
✅ Supervisors see team confidence rollup
ISO 9001:2015 Compliance Mapping
This implementation satisfies the following ISO 9001:2015 clauses:

✅ Clause 6.2 - Quality Objectives and Planning
Requirement: Organizations shall establish quality objectives and plan how to achieve them.

Implementation:

Objectives have individual owners (who will be responsible)
Start/end dates define timeline (when will be completed)
Resource planning documents resources needed (what resources required)
Key results define measurable outcomes (how results will be evaluated)
Quality policy linkage ensures alignment
Evidence: Phase 2, Phase 3

✅ Clause 7.5 - Documented Information
Requirement: Documented information must be controlled and available.

Implementation:

Complete audit trail of all changes (immutable logs)
Evidence attachment system with verification
Timestamped records of all actions
Version control via snapshots
Evidence: Phase 4, Phase 6

✅ Clause 9.1 - Monitoring, Measurement, Analysis and Evaluation
